@model SAEON.Identity.Service.Config.Client

@{
    ViewData["Title"] = Model.dbid == 0 ? "Add client resource" : "Edit client resource";
}

<hr style="margin-top: 0px" />

<div class="row" style="margin-left:-10px">
    <div class="col-lg-6">
        @using (Html.BeginForm())
        {
            //Id
            @Html.HiddenFor(m => m.dbid)

            //ClientID
            <div class="editor-label">
                <label><b>Id:</b></label>
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(m => m.ClientId)*@
            </div>

            //ClientName
            <br />
            <div class="editor-label">
                <label><b>Name:</b></label>
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(m => m.ClientName)*@
            </div>

            //IdentityTokenLifetime
            <br />
            <div class="editor-label">
                <label><b>Identity Token Lifetime:</b></label>
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.IdentityTokenLifetime, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(m => m.IdentityTokenLifetime)*@
            </div>

            //AccessTokenLifetime
            <br />
            <div class="editor-label">
                <label><b>Access Token Lifetime:</b></label>
            </div>
            <div class="editor-field">
                @Html.EditorFor(m => m.AccessTokenLifetime, new { htmlAttributes = new { @class = "form-control" } })
                @*@Html.ValidationMessageFor(m => m.AccessTokenLifetime)*@
            </div>

            //AllowedGrantType
            var GrantTypesList = new List<string>() {
            "ClientCredentials",
            "Code",
            "CodeAndClientCredentials",
            "Hybrid",
            "HybridAndClientCredentials",
            "Implicit",
            "ImplicitAndClientCredentials",
            "ResourceOwnerPassword",
            "ResourceOwnerPasswordAndClientCredentials"
        };

            <br />
            <div class="editor-label">
                <label><b>Allowed Grant Type:</b></label>
            </div>
            <div class="editor-field">
                @Html.DropDownListFor(m => m.GrantType,
                new SelectList(GrantTypesList),
                new { @class = "form-control" })
            </div>

            //ClientSecrets
            <br />
            <div class="editor-label">
                <label><b>Client Secret(s):</b></label>
            </div>
            <div class="editor-field">
                @Html.HiddenFor(m => m.Secrets_Combined)
                @Html.TextAreaFor(m => m.NewSecrets_Combined, new { @class = "form-control", @rows = (Model.NewSecrets.Count + 1), @wrap = "off" })
                <label style="font-size: small; color:steelblue">
                    <i>
                        <p>
                            * secrets can't be edited, but you can set new value(s) here
                            <br />
                            * one value per line
                        </p>
                    </i>
                </label>
            </div>

            //AllowedScopes
            <br />
            <div class="editor-label">
                <label><b>Allowed Scope(s):</b></label>
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(m => m.Scopes_Combined, new { @class = "form-control", @rows = (Model.Scopes.Count + 1), @wrap = "off" })
                <label style="font-size: small; color:steelblue"><i>* one value per line</i></label>
            </div>

            //AllowedCorsOrigins
            <br />
            <div class="editor-label">
                <label><b>Allowed Cors Origin(s):</b></label>
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(m => m.CorsOrigins_Combined, new { @class = "form-control", @rows = (Model.CorsOrigins.Count + 1), @wrap = "off" })
                <label style="font-size: small; color:steelblue"><i>* one value per line</i></label>
            </div>

            //RedirectUris
            <br />
            <div class="editor-label">
                <label><b>Redirect Uri(s):</b></label>
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(m => m.RedirectURIs_Combined, new { @class = "form-control", @rows = (Model.RedirectURIs.Count + 1), @wrap = "off" })
                <label style="font-size: small; color:steelblue"><i>* one value per line</i></label>
            </div>

            //PostLogoutRedirectUris
            <br />
            <div class="editor-label">
                <label><b>Post Logout Redirect Uri(s):</b></label>
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(m => m.PostLogoutRedirectURIs_Combined, new { @class = "form-control", @rows = (Model.PostLogoutRedirectURIs.Count + 1), @wrap = "off" })
                <label style="font-size: small; color:steelblue"><i>* one value per line</i></label>
            </div>

            //RequireConsent
            <br />
            <div class="custom-control custom-checkbox">
                @Html.CheckBox("RequireConsent", Model.RequireConsent, new { @class = "custom-control-input", @type = "checkbox", @id = "RequireConsent" })
                <label style="font-weight:400" class="custom-control-label" for="RequireConsent"> Require Consent</label>
            </div>

            //RememberConsent
            <br />
            <div class="custom-control custom-checkbox">
                @Html.CheckBox("RememberConsent", Model.RememberConsent, new { @class = "custom-control-input", @type = "checkbox", @id = "RememberConsent" })
                <label style="font-weight:400" class="custom-control-label" for="RememberConsent"> Remember Consent</label>
            </div>

            //OfflineAccess
            <br />
            <div class="custom-control custom-checkbox">
                @Html.CheckBox("OfflineAccess", Model.OfflineAccess, new { @class = "custom-control-input", @type = "checkbox", @id = "OfflineAccess" })
                <label style="font-weight:400" class="custom-control-label" for="OfflineAccess"> Offline Access</label>
            </div>

            //AccessTokensViaBrowser
            <br />
            <div class="custom-control custom-checkbox">
                @Html.CheckBox("AccessTokensViaBrowser", Model.AccessTokensViaBrowser, new { @class = "custom-control-input", @type = "checkbox", @id = "AccessTokensViaBrowser" })
                <label style="font-weight:400" class="custom-control-label" for="AccessTokensViaBrowser"> Access Tokens Via Browser</label>
            </div>

            <br />
            <br />

            <button type="button" style="margin-left:0px; min-width: 125px" id="btnSave" class="btn btn-primary">Save</button>
            <button hidden type="submit" style="margin-left:0px; min-width: 125px" id="btnConfirm" class="btn btn-warning">Confirm</button>

            <button type="button" style="margin-left:0px; min-width: 125px" class="btn btn-default" onclick="location.href='@Url.Action("ClientResources", "Config")'">
                Cancel
            </button>
        }
    </div>
</div>

<hr />

<script src="~/node_modules/mdbootstrap/js/jquery.min.js"></script>
<script type="text/javascript">

    function replaceSpaceOrDot(value) {
        while (value.indexOf(".") > 0 || value.indexOf(" ") > 0) {
            value = value.replace(" ", "_").replace(".", "_")
        }
        return value
    }

    $("#Id").keyup(() => {
        $("#Id").val(replaceSpaceOrDot($("#Id").val()))
    })

    $("#Scopes_Combined").keyup(() => {
        let value = $("#Scopes_Combined").val()
        $("#Scopes_Combined").val(replaceSpaceOrDot(value))
        $("#Scopes_Combined").attr("rows", (value.split("\n").length + 1).toString())
    })

    $("#NewSecrets_Combined").keyup(() => {
        let value = $("#NewSecrets_Combined").val()
        $("#NewSecrets_Combined").attr("rows", (value.split("\n").length + 1).toString())
    })

    $("#CorsOrigins_Combined").keyup(() => {
        let value = $("#CorsOrigins_Combined").val()
        $("#CorsOrigins_Combined").attr("rows", (value.split("\n").length + 1).toString())
    })

    $("#RedirectURIs_Combined").keyup(() => {
        let value = $("#RedirectURIs_Combined").val()
        $("#RedirectURIs_Combined").attr("rows", (value.split("\n").length + 1).toString())
    })

    $("#PostLogoutRedirectURIs_Combined").keyup(() => {
        let value = $("#PostLogoutRedirectURIs_Combined").val()
        $("#PostLogoutRedirectURIs_Combined").attr("rows", (value.split("\n").length + 1).toString())
    })

    $("#btnSave").click(function () {
        $("#btnSave").attr("hidden", true)
        $("#btnConfirm").removeAttr("hidden")
    })

</script>