@model List<SAEON.Identity.Service.Config.Role>

@{
    ViewData["Title"] = "Manage User Roles";
}

<hr style="margin-top: 0px" />

<div class="row" style="margin-left:-10px">
    <div class="col-lg-6">

        @*Add Role*@
        <div class="editor-label">
            <label><b>Add Role:</b></label>
        </div>
        <div class="editor-field">
            <input type="text" id="AddRole" class="form-control">
            <label style="font-size: small; color:steelblue"><i>* press Enter to add</i></label>
        </div>

        @using (Html.BeginForm())
        {
            //Edit Roles
            <br />
            <div class="editor-label">
                <label><b>Edit Roles:</b></label>
            </div>
            <div id="RolesPartial">
                @Html.Partial("RolesPartial")
            </div>

            <br />
            <button type="button" style="margin-left:0px; min-width: 125px" id="btnSave" class="btn btn-primary">Save</button>
            <button hidden type="submit" style="margin-left:0px; min-width: 125px" id="btnConfirm" class="btn btn-warning">Confirm</button>

            <button type="button" style="margin-left:0px; min-width: 125px" class="btn btn-default" onclick="location.href='@Url.Action("UserRoleManagement", "Config")'">
                Cancel
            </button>
        }
    </div>
</div>

<hr />

<script src="~/node_modules/mdbootstrap/js/jquery-3.3.1.min.js"></script>
<script type="text/javascript">

    var jsModel = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@Model) as String);

    function createGuid() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }  

    $("#AddRole").change(() => {

        let value = $("#AddRole").val()

        //Get data from Model
        //let model = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(@Model) as String);

        //Add new role to list (if it does not exist)
        if (jsModel.filter(x => x.Name === value).length === 0) {
            jsModel.push({ Id: createGuid(), Name: value })
        }

        //Post data to Controller
        $.ajax({
            type: "POST",
            data: JSON.stringify(jsModel),
            url: "/Config/UpdateRoles",
            contentType: "application/json"
        }).done(function (res) {
            //Update partial view
            $("#RolesPartial").html(res);
            $("#AddRole").val("")
        });
    })

    $(".roleEditor").keyup(function () { 

        //console.log(this.dataset.uid)
        //console.log(this.value)

        jsModel.forEach((x) => {
            if (x.Id === this.dataset.uid) {
                x.Name = this.value
            }
        })

        console.log(jsModel)
    })

    function DeleteRole(e) {

        //Remove "deleted" item
        jsModel = jsModel.filter(x => x.Id !== e.dataset.uid)

        //Post data to Controller
        $.ajax({
            type: "POST",
            data: JSON.stringify(jsModel),
            url: "/Config/UpdateRoles",
            contentType: "application/json"
        }).done(function (res) {
            //Update partial view
            $("#RolesPartial").html(res);
        });
    }

    $("#btnSave").click(function () {
        $("#btnSave").attr("hidden", true)
        $("#btnConfirm").removeAttr("hidden")
    })

</script>